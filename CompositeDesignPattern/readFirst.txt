The Composite Design Pattern is a structural design pattern that lets you compose objects into tree-like structures to represent part-whole hierarchies. It allows clients to treat individual objects and compositions of objects uniformly. In other words,
whether dealing with a single object or a group of objects (composite), clients can use them interchangeably.

The key concept is that you can manipulate a single instance of the object just as you would manipulate a group of them.
The operations you can perform on all the composite objects often have the least common denominator relationship.


1. Component
The component declares the interface for objects in the composition and for accessing and managing its child components. This is like a blueprint that tells us what both individual items (leaves) and groups of items (composites) should be able to do. It lists the things they all have in common.
2. Leaf
Leaf defines behavior for primitive objects in the composition. This is the basic building block of the composition, representing individual objects that donâ€™t have any child components. Leaf elements implement the operations defined by the Component interface.
3. Composite
Composite stores child components and implements child-related operations in the component interface. This is a class that has child components, which can be either leaf elements or other composites. A composite class implements the methods declared in the Component interface, often by delegating the operations to its child components.
4. Client
The client manipulates the objects in the composition through the component interface. The client uses the component class interface to interact with objects in the composition structure. If the recipient is a leaf then the request is handled directly. If the recipient is a composite, then it usually forwards the request to its child components, possibly performing additional operations before and after forwarding.